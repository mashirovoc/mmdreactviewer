var w=Object.defineProperty;var d=(x,e,t)=>e in x?w(x,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):x[e]=t;var f=(x,e,t)=>d(x,typeof e!="symbol"?e+"":e,t);import{C as u,A as l}from"./index-DLwZZTw2.js";const g=class g{constructor(){f(this,"supportCascades",!1);f(this,"_workingCanvas",null);f(this,"_workingContext",null)}loadCubeData(){throw".dxbmp not supported in Cube"}_injectHeader(e){const t=new DataView(e.buffer,e.byteOffset,e.byteLength);if(t.getUint16(0,!0)!==19778||t.getUint32(14,!0)!==40||t.getUint16(28,!0)!==32||t.getUint32(30,!0)!==0)return e;const n=new Uint8Array(e.byteLength+68);n.set(new Uint8Array(e.buffer,e.byteOffset,54),0),n.set(new Uint8Array(e.buffer,e.byteOffset+54,e.byteLength-54),122);const i=new DataView(n.buffer,n.byteOffset,n.byteLength),s=i.getUint32(2,!0);i.setUint32(2,s+68,!0);const c=i.getUint32(10,!0);return i.setUint32(10,c+68,!0),i.setUint32(14,108,!0),i.setUint32(30,3,!0),n.set(g._HeaderExtension,54),n}_prepareTextureProcess(e,t){const r=e.getEngine();if(!this._workingCanvas&&(this._workingCanvas=document.createElement("canvas"),this._workingContext=this._workingCanvas.getContext("2d"),!this._workingContext))throw new Error("Unable to get 2d context");const o=this._workingCanvas,a=this._workingContext;o.width=t.width,o.height=t.height,a.drawImage(t,0,0);const i=a.getImageData(0,0,t.width,t.height).data;e.type=u.TEXTURETYPE_UNSIGNED_BYTE,e.format=u.TEXTUREFORMAT_RGBA,r._uploadDataToTextureDirectly(e,i,void 0,void 0,void 0,!0)}loadData(e,t,r){const o=s=>{r(s.width,s.height,!0,!1,()=>this._prepareTextureProcess(t,s))},a=(s,c)=>{r(1,1,!1,!1,()=>{},!0)},n=this._injectHeader(e),i=t.getEngine();l._FileToolsLoadImage(n,o,a,null,void 0,t.invertY&&i._features.needsInvertingBitmap?{imageOrientation:"flipY"}:void 0)}};f(g,"_HeaderExtension",new Uint8Array([0,0,255,0,0,255,0,0,255,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]));let h=g;export{h as _DxBmpTextureLoader};
